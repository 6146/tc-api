FORMAT: 1A
HOST: http://api.topcoder.com/v2

# TopCoder API
Programmatically access TopCoder contests and members.

#Group Software Contests

## Contest Types Collection [/software/contesttypes]
### List all contest types [GET]
+ Response 200 (application/json)

        [
            {
                "contestCategoryId": 2,
                "contestTypeId": 1,
                "name": "Development",
                "description": "Development"
            },
            {
                "contestCategoryId": 1,
                "contestTypeId": 1,
                "name": "Design",
                "description": "Design"
            }
        ]

## Search Contests [/software/contests?listType={listType}&pageIndex={pageIndex}&pageSize={pageSize}&sortColumn={sortColumn}&sortOrder={sortOrder}&filter={filter}&value={value}]
### Search Contests [GET]

+ Parameters
    + listType (optional, string, `Active`) ... The type of contests to search. It can only be 'ALL', 'ACTIVE', 'OPEN', 'PAST' or 'UPCOMING'. If it's null, 'ALL' will be should used.
    + filter (optional, string, `type`) ... Key of the filter key-value pair
    + value (optional, string, `Development`) ... Value of the filter key-value pair
    + pageIndex (optional, number, `1`) ... The paging number, 1-based, -1 if no paging. It can be null.
    + pageSize (optional, number, `50`) ... The max number of the results, should be set if pageIndex is set.
    + sortColumn (optional, string, `contestName`) ... The column name to sort, can be null.
    + sortOrder (optional, string, `asc`) ... The sorting order, can be null. If it's set, it can only be 'asc' or 'desc'.
    

+ Response 200 (application/json)

        {
            "total": 30,
            "pageIndex": 1,
            "pageSize": 3,
            "data": [
                {
                    "type": "Web Design",
                    "contestName": "Cornell - Responsive Storyboard Economics Department Site Redesign Contest",
                    "description": "Welcome to ¡°Cornell ¨C Responsive Storyboard Economics Site Redesign contest¡±. The goal of this contest is to redesign look and feel for one of our college site departments (economics) using base design and customer feedback provided in this contest. There are two pages that needs to be redesigned a",
                    "numberOfSubmissions": 16,
                    "numberOfRatedRegistrants": 27,
                    "numberOfUnratedRegistrants": 27,
                    "contestId": 30036096,
                    "projectId": 6789,
                    "registrationEndDate": "10.31.2013 10:10 EDT",
                    "submissionEndDate": "10.31.2013 10:09 EDT",
                    "prize": [1250, 500],
                    "reliabilityBonus": 0,
                    "digitalRunPoints": 500
                },
                {
                    "type": "UI Prototype Competition",
                    "catalog": "UI Development",
                    "contestName": "Corningstone App UI Prototype 2",
                    "description": "http://apps.topcoder.com/wiki/display/docs/Corningstone+App+UI+Prototype+2\n\n",
                    "numberOfSubmissions": 0,
                    "numberOfRatedRegistrants": 27,
                    "numberOfUnratedRegistrants": 27,
                    "contestId": 30036099,
                    "projectId": 6484,
                    "registrationEndDate": "10.26.2013 16:01 EDT",
                    "submissionEndDate": "10.31.2013 16:06 EDT",
                    "prize": [1250, 500],
                    "reliabilityBonus": 660,
                    "digitalRunPoints": 990
                },
                {
                    "type": "Content Creation",
                    "catalog": "UI Development",
                    "contestName": "Crowdsourced Application Security Standards and Review",
                    "description": "Project Overview:\n\n\nWe would like TopCoders help in designing a security standards document that will be included with every TC project to help define a uniform approach to secure code development across this diverse community of contributors. Also we are hoping to have TopCoder design the review an",
                    "numberOfSubmissions": 4,
                    "numberOfRatedRegistrants": 27,
                    "numberOfUnratedRegistrants": 27,
                    "contestId": 30036091,
                    "projectId": 6778,
                    "registrationEndDate": "10.28.2013 10:28 EDT",
                    "submissionEndDate": "10.31.2013 10:34 EDT",
                    "prize": [1250, 500],
                    "reliabilityBonus": 360,
                    "digitalRunPoints": 0
                }
            ]
        }

+ Response 400 (application/json)

        {"description":"Invalid Page Index.","name":"Bad Request","value":"400"}

## Get Contest Detail [/software/contests/{id}]
### Get Contest Information [GET]

+ Parameters
    + id (required, number, `30000000`) ... The contest id.

+ Response 200 (application/json)
        
        {
            "type": "Web Design",
            "contestName": "Cornell - Responsive Storyboard Economics Department Site Redesign Contest",
            "description": "Welcome to ¡°Cornell ¨C Responsive Storyboard Economics Site Redesign contest¡±. The goal of this contest is to redesign look and feel for one of our college site departments (economics) using base design and customer feedback provided in this contest. There are two pages that needs to be redesigned a",
            "numberOfSubmissions": 16,
            "numberOfRegistrants": 27,
            "numberOfPassedScreeningSubmissions": 27,
            "contestId": 30036096,
            "projectId": 6789,
            "registrationEndDate": "10.31.2013 10:10 EDT",
            "submissionEndDate": "10.31.2013 10:09 EDT",
            "prize":[1000, 250],
            "milestone":
                [
                    "prize": 100,
                    "number": 5
                ],
            "reliabilityBonus": 0,
            "digitalRunPoints": 500
            "registrants" :
                [
                    {
                        "handle": "iRabbit",
                        "reliability": "100%",
                        "registrationDate": "10.31.2013 10:10 EDT"
                    },
                    {
                        "handle": "hohosky",
                        "reliability": "100%",
                        "registrationDate": "10.31.2013 10:10 EDT"
                    }
                ]
            "submissions" :
                [
                    {
                        "handle": "iRabbit",
                        "placement": 1,
                        "screeningScore": 97,
                        "initialScore": 97,
                        "final": 97,
                        "points": 100,
                        "submissionDate": "10.31.2013 10:10 EDT"
                    },
                    {
                        "handle": "hohosky",
                        "placement": 2,
                        "screeningScore": 97,
                        "initialScore": 96,
                        "final": 96,
                        "points": 50,
                        "submissionDate": "10.31.2013 10:10 EDT"
                    }
                ]
        }

+ Response 404 (application/json)

        {"description":"unknown contest.","name":"Not Found","value":"404"}

## Top Ranked Members [/software/statistics/tops/{contestType}?pageIndex={pageIndex}&pageSize={pageSize}&sortColumn={sortColumn}&sortOrder={sortOrder}]
### Top Ranked Members [GET]

+ Parameters
    + contestType (required, string, `Competitors`) ... Ranking Type, support "Competitors", "Schools" and "Countries"
    + pageIndex (optional, number, `1`) ... The paging number, 1-based, -1 if no paging. It can be null.
    + pageSize (optional, number, `50`) ... The max number of the results, should be set if pageIndex is set.
    + sortColumn (optional, string, `Handle`) ... The column name to sort, can be null.
    + sortOrder (optional, string, `asc`) ... The sorting order, can be null. If it's set, it can only be 'asc' or 'desc'.
    
+ Response 200 (application/json)

        {
            "total": 30,
            "pageIndex": 1,
            "pageSize": 3,
            "data": 
            [
                {
                "Rank": 1,
                "Handle": "Petr",
                "userId": 123457899,
                "Color": "Red",
                "Rating": 3000
                },
                {
                    "Rank": 2,
                    "Handle": "ACRush",
                    "userId": 123457892,
                    "Color": "Red",
                    "Rating": 2500
                },
                {
                    "Rank": 3,
                    "Handle": "lympanda",
                    "userId": 123457891,
                    "Color": "Yellow",
                    "Rating": 2000
                }
            ]
        }

    
+ Response 201 (application/json)

        {
            "total": 30,
            "pageIndex": 1,
            "pageSize": 3,
            "data": 
            [
                {
                    "Rank": 1,
                    "Name": "University of Tokyo",
                    "Country": "Japan",
                    "Member Count": 73,
                    "Rating": 3000
                },
                {
                    "Rank": 2,
                    "Name": "University of Washington",
                    "Country": "USA",
                    "Member Count": 73,
                    "Rating": 3000
                },
                {
                    "Rank": 3,
                    "Name": "Tsinghua University",
                    "Country": "China",
                    "Member Count": 73,
                    "Rating": 3000
                }
            ]
        }

+ Response 202 (application/json)

        {
            "total": 30,
            "pageIndex": 1,
            "pageSize": 3,
            "data": 
            [
                {
                    "Rank": 1,
                    "Name": "Japan",
                    "Member Count": 73,
                    "Rating": 3000
                },
                {
                    "Rank": 2,
                    "Name": "USA",
                    "Member Count": 73,
                    "Rating": 3000
                },
                {
                    "Rank": 3,
                    "Name": "China",
                    "Member Count": 73,
                    "Rating": 3000
                }
            ]
        }

+ Response 404 (application/json)

        {
            "description":"unknown ranking type.",
            "name":"Not Found","value":"404"
        }

+ Response 400 (application/json)

        {
            "description":"Invalid Page Index.",
            "name":"Bad Request","value":"400"
        }
        
# Group Registration
Register a new user.

## Users [/users]
+ Model (application/json)

        {
            "firstname" : "John",
            "lastname" : "Doe",
            "handle" : "uniqueLogin",
            "country" : "UK",
            "email" : "name@domain.com",
            "password" : "HashedPassword",
            "socialProvider" : "google",
            "socialUserName" : "JohnsGoogleName",
            "socialEmail" : "john@gmail.com",
            "socialEmailVerified" : "true"
        }

### Create a new user [POST]
+ Request (application/json)

    [Users][]

+ Response 200 (application/json)

        {
            "status" : "user successfully created"
        }
        

# Group Studio Contests

## Top Ranked Members [/studio/statistics/tops/{contestType}?pageIndex={pageIndex}&pageSize={pageSize}&sortColumn={sortColumn}&sortOrder={sortOrder}]
### Top Ranked Members [GET]

+ Parameters
    + contestType (required, string, `Competitors`) ... Ranking Type, support "Competitors", "Schools" and "Countries"
    + pageIndex (optional, number, `1`) ... The paging number, 1-based, -1 if no paging. It can be null.
    + pageSize (optional, number, `50`) ... The max number of the results, should be set if pageIndex is set.
    + sortColumn (optional, string, `Handle`) ... The column name to sort, can be null.
    + sortOrder (optional, string, `asc`) ... The sorting order, can be null. If it's set, it can only be 'asc' or 'desc'.
    
+ Response 200 (application/json)

        {
            "total": 30,
            "pageIndex": 1,
            "pageSize": 3,
            "data": 
            [
                {
                    "Rank": 1,
                    "Handle": "Petr",
                    "userId": 123457898,
                    "Color": "Red",
                    "numberOfWinningSubmissions": 3000
                },
                {
                    "Rank": 2,
                    "Handle": "ACRush",
                    "userId": 123457899,
                    "Color": "Red",
                    "numberOfWinningSubmissions": 2500
                },
                {
                    "Rank": 3,
                    "Handle": "lympanda",
                    "userId": 123457891,
                    "Color": "Yellow",
                    "numberOfWinningSubmissions": 2000
                }
            ]
        }

    
+ Response 201 (application/json)

        {
            "total": 30,
            "pageIndex": 1,
            "pageSize": 3,
            "data": 
            [
                {
                    "Rank": 1,
                    "Name": "University of Tokyo",
                    "Country": "Japan",
                    "Member Count": 73,
                    "numberOfWinningSubmissions": 3000
                },
                {
                    "Rank": 2,
                    "Name": "University of Washington",
                    "Country": "USA",
                    "Member Count": 73,
                    "numberOfWinningSubmissions": 3000
                },
                {
                    "Rank": 3,
                    "Name": "Tsinghua University",
                    "Country": "China",
                    "Member Count": 73,
                    "numberOfWinningSubmissions": 3000
                }
            ]
        }

+ Response 202 (application/json)

        {
            "total": 30,
            "pageIndex": 1,
            "pageSize": 3,
            "data": 
            [
                {
                    "Rank": 1,
                    "Name": "Japan",
                    "Member Count": 73,
                    "numberOfWinningSubmissions": 3000
                },
                {
                    "Rank": 2,
                    "Name": "USA",
                    "Member Count": 73,
                    "numberOfWinningSubmissions": 3000
                },
                {
                    "Rank": 3,
                    "Name": "China",
                    "Member Count": 73,
                    "numberOfWinningSubmissions": 3000
                }
            ]
        }

+ Response 404 (application/json)

        {
            "description":"unknown ranking type.",
            "name":"Not Found",
            "value":"404"
        }

+ Response 400 (application/json)

        {
            "description":"Invalid Page Index.",
            "name":"Bad Request",
            "value":"400"
        }
        
# Group Algorithms Contests

## View Algorithm Contests [/algorithms/contests?listType={listType}&pageSize={pageSize}&pageIndex={pageIndex}&sortColumn={sortColumn}&sortOrder=

{sortOrder}&filter={filter}&value={value}]
### View Algorithm Contests [GET]

+ Parameters
    + listType (optional, string, `Active`) ... The type of contests to search. It can only be 'ACTIVE', 'OPEN', 'PAST' or 'UPCOMING'. If it's 

null, 'Active' will be should used.
    + filter (optional, string, `type`) ... Key of the filter key-value pair
    + value (optional, string, `Development`) ... Value of the filter key-value pair    
    + pageIndex (optional, number, `1`) ... The paging number, 1-based, -1 if no paging. It can be null.
    + pageSize (optional, number, `50`) ... The max number of the results, should be set if pageIndex is set.
    + sortColumn (optional, string, `contestName`) ... The column name to sort, can be null.
    + sortOrder (optional, string, `asc`) ... The sorting order, can be null. If it's set, it can only be 'asc' or 'desc'.
    
+ Response 200 (application/json)
        
        {
            "SRM":
            {
                "pageSize": 2,
                "pageNumber": 1,
                "totalPages": 9,
                "totalCount": 450,
                "items": [
                {
                    "roundId": 15761,
                    "fullName": "USAID and Humanity United",
                    "shortName": "Tech Challenge for Atrocity Prevention",
                    "startDate": "08.22.2013 13:30 EDT",
                    "endDate": "08.22.2013 13:30 EDT",
                    "winnerHandle": "nhzp339",
                    "winnerScore": 376.79
                },
                {
                    "roundId": 15684,
                    "fullName": "Marathon Match 81",
                    "shortName": "Marathon Match 81",
                    "startDate": "06.05.2013 12:43 EDT",
                    "endDate": "06.05.2013 12:43 EDT",
                    "winnerHandle": "ACRush",
                    "winnerScore": 999534.81
                }
            },

            "Marathon":
            {
                "pageSize": 2,
                "pageNumber": 1,
                "totalPages": 9,
                "totalCount": 450,
                "items": [
                {
                    "roundId": 15761,
                    "name": "SRM 595",
                    "startDate": "08.22.2013 13:30 EDT",
                    "totalCompetitors": 911,
                    "divICompetitors": 410,
                    "divIICompetitors": 501,
                    "divITotalSolutionsSubmitted": 486,
                    "divIAverageSolutionsSubmitted": 1.19,
                    "divIITotalSolutionsSubmitted": 486,
                    "divIIAverageSolutionsSubmitted": 1.19,
                    "divITotalSolutionsChallenged": 486,
                    "divIAverageSolutionsChallenged": 1.19,
                    "divIITotalSolutionsChallenged": 486,
                    "divIIAverageSolutionsChallenged": 1.19
                },
                {
                    "roundId": 15684,
                    "name": "SRM 594",
                    "startDate": "08.22.2013 13:30 EDT",
                    "totalCompetitors": 911,
                    "divICompetitors": 410,
                    "divIICompetitors": 501,
                    "divITotalSolutionsSubmitted": 486,
                    "divIAverageSolutionsSubmitted": 1.19,
                    "divIITotalSolutionsSubmitted": 486,
                    "divIIAverageSolutionsSubmitted": 1.19,
                    "divITotalSolutionsChallenged": 486,
                    "divIAverageSolutionsChallenged": 1.19,
                    "divIITotalSolutionsChallenged": 486,
                    "divIIAverageSolutionsChallenged": 1.19
                }
            }
        }

+ Response 400 (application/json)

        {
            "description":"Invalid Page Index.",
            "name":"Bad Request",
            "value":"400"
        }

## Get Algorithm Contest Detail [/algorithms/contests/{id}]
### Get Algorithm Contest Information [GET]

+ Parameters
    + id (required, number, `30000000`) ... The contest id.

+ Response 200 (application/json)

        {
            "roundId": 15707,
            "name": "SRM 595",
            "leaders":
            {
                "divisionI":
                [
                    {
                        "handle": "Petr",
                        "score": 1531.29,
                        "placed": 1,
                        "room": 1
                    },
                    {
                        "handle": "ir5",
                        "score": 1530.29,
                        "placed": 2,
                        "room": 2
                    }
                ],
                "divisionII":
                [
                    {
                        "handle": "xyz111",
                        "score": 1531.29,
                        "placed": 1,
                        "room": 1
                    },
                    {
                        "handle": "jason_yu",
                        "score": 1530.29,
                        "placed": 2,
                        "room": 2
                    }
                ]
            },
            "problems":
            {
                "divisionI":
                [
                    {
                        "level": 1,
                        "problemName": "easy",
                        "submissions": 378,
                        "correct%": 82.01,
                        "averagePoints": 206.36
                    },
                    {
                        "level": 2,
                        "problemName": "easy",
                        "submissions": 378,
                        "correct%": 82.01,
                        "averagePoints": 206.36
                    },
                    {
                        "level": 3,
                        "problemName": "easy",
                        "submissions": 378,
                        "correct%": 82.01,
                        "averagePoints": 206.36
                    }
                ],
                "divisionII":
                [
                    {
                        "level": 1,
                        "problemName": "easy",
                        "submissions": 378,
                        "correct%": 82.01,
                        "averagePoints": 206.36
                    },
                    {
                        "level": 2,
                        "problemName": "easy",
                        "submissions": 378,
                        "correct%": 82.01,
                        "averagePoints": 206.36
                    },
                    {
                        "level": 3,
                        "problemName": "easy",
                        "submissions": 378,
                        "correct%": 82.01,
                        "averagePoints": 206.36
                    }
                ]
            }
        }

        {
            "roundId": 15678,
            "fullName": "SensorFusion2",
            "shortName": "SensorFusion2",
            "noOfRegistrants": 295,
            "noOfSubmissions": 215,
            "noOfCompetitors": 32,
            "startDate": "05.22.2013 09:00 EDT",
            "endDate": "06.05.2013 09:00 EDT",
            "systemTestDate": "06.05.2013 09:00 EDT",
            "winnerHandle": "JacoCronje",
            "winnerScore": 403096.68,
            "currentProgress": 
            {
                "groupType": "HOUR",
                "progressResources": 
                [
                    {
                        "currentTopProvisionalScore": 0,
                        "currentNoOfSubmissions": 0,
                        "currentNoOfcompetitors": 0,
                        "currentNoOfRegistrants": 4,
                        "date": "05.22.2013 10:00 EDT",
                        "topUserHandle": ""
                    },
                    {
                        "currentTopProvisionalScore": 0,
                        "currentNoOfSubmissions": 0,
                        "currentNoOfcompetitors": 0,
                        "currentNoOfRegistrants": 9,
                        "date": "05.22.2013 11:00 EDT",
                        "topUserHandle": ""
                    }
                ]
            },
             "registrantsRatingSummary": 
             [
                {
                    "ratingType": "BLUE",
                    "ratingColor": "Blue",
                    "noOfMembers": 18
                },
                {
                    "ratingType": "GRAY",
                    "ratingColor": "Gray",
                    "noOfMembers": 26
                }
            ]
        }
        
## Top Ranked Members [/algorithms/statistics/tops/{contestType}?pageIndex={pageIndex}&pageSize={pageSize}&sortColumn={sortColumn}&sortOrder={sortOrder}]
### Top Ranked Members [GET]

+ Parameters
    + contestType (required, string, `Competitors`) ... Ranking Type, support "Competitors", "Schools" and "Countries"
    + pageIndex (optional, number, `1`) ... The paging number, 1-based, -1 if no paging. It can be null.
    + pageSize (optional, number, `50`) ... The max number of the results, should be set if pageIndex is set.
    + sortColumn (optional, string, `Handle`) ... The column name to sort, can be null.
    + sortOrder (optional, string, `asc`) ... The sorting order, can be null. If it's set, it can only be 'asc' or 'desc'.
    
+ Response 200 (application/json)

        {
            "total": 30,
            "pageIndex": 1,
            "pageSize": 3,
            "data": 
            [
                {
                    "Rank": 1,
                    "Handle": "Petr",
                    "userId": 123457899,
                    "Color": "Red",
                    "Rating": 3000
                },
                {
                    "Rank": 2,
                    "Handle": "ACRush",
                    "userId": 123457891,
                    "Color": "Red",
                    "Rating": 2500
                },
                {
                    "Rank": 3,
                    "Handle": "lympanda",
                    "userId": 123457892,
                    "Color": "Yellow",
                    "Rating": 2000
                }
            ]
        }

    
+ Response 201 (application/json)

        {
            "total": 30,
            "pageIndex": 1,
            "pageSize": 3,
            "data": 
            [
                {
                    "Rank": 1,
                    "Name": "University of Tokyo",
                    "Country": "Japan",
                    "Member Count": 73,
                    "Rating": 3000
                },
                {
                    "Rank": 2,
                    "Name": "University of Washington",
                    "Country": "USA",
                    "Member Count": 73,
                    "Rating": 3000
                },
                {
                    "Rank": 3,
                    "Name": "Tsinghua University",
                    "Country": "China",
                    "Member Count": 73,
                    "Rating": 3000
                }
            ]
        }

+ Response 202 (application/json)

        {
            "total": 30,
            "pageIndex": 1,
            "pageSize": 3,
            "data": 
            [
                {
                    "Rank": 1,
                    "Name": "Japan",
                    "Member Count": 73,
                    "Rating": 3000
                },
                {
                    "Rank": 2,
                    "Name": "USA",
                    "Member Count": 73,
                    "Rating": 3000
                },
                {
                    "Rank": 3,
                    "Name": "China",
                    "Member Count": 73,
                    "Rating": 3000
                }
            ]
        }

+ Response 404 (application/json)

        {
            "description":"unknown ranking type.",
            "name":"Not Found",
            "value":"404"
        }

+ Response 400 (application/json)

        {
            "description":"Invalid Page Index.",
            "name":"Bad Request",
            "value":"400"
        }
