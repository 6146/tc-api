/*
 * Copyright (C) 2013 TopCoder Inc., All Rights Reserved.
 *
 * @version 1.1
 * @author Sky_, Ghost_141
 * changes in 1.1:
 * - remove studio tests
 * changes in 1.2:
 * Merge the tests for Search Studio Contests, Get Studio Contest Detail, Get Software Contest Detail API in this file.
 */
"use strict";
/*global describe, it, before, beforeEach, after, afterEach, __dirname */
/*jslint node: true, stupid: true, unparam: true */

/**
 * Module dependencies.
 */
var request = require('supertest');
var assert = require('chai').assert;
var expect = require('chai').expect;
var async = require('async');
var testHelper = require('./helpers/testHelper');

var API_ENDPOINT = process.env.API_ENDPOINT || 'http://localhost:8080';
var SQL_DIR = __dirname + "/sqls/contests/";
var TCS_CATALOG = "tcs_catalog";
var TCS_DW = 'tcs_dw';
var ListType = { ACTIVE: "ACTIVE", OPEN: "OPEN", UPCOMING: "UPCOMING", PAST: "PAST" };
var software_collection_length = {};
software_collection_length[ListType.ACTIVE] = 5;
software_collection_length[ListType.OPEN] = 4;
software_collection_length[ListType.UPCOMING] = 2;
software_collection_length[ListType.PAST] = 2;

describe('Test Contests API', function () {
    this.timeout(60000); // The api with testing remote db could be quit slow


    /**
     * Assert contest properties.
     * Contests are generated by pattern that depends on nr, isStudio, type and details parameters.
     * @param {Object} contest - the contest to check
     */
    function assertContest(contest) {
        expect(contest.challengeName).to.contain(contest.challengeType);

        assert.ok(contest.challengeId, "Invalid contestId");
        assert.ok(contest.projectId, "Invalid projectId");
        assert.ok(new Date(contest.registrationEndDate).toString() !== "InvalidDate",
            "Invalid registrationEndDate");
        assert.ok(new Date(contest.submissionEndDate).toString() !== "InvalidDate",
            "Invalid submissionEndDate");
        assert.ok(contest.prize, "Invalid prize");
        assert.ok(contest.prize.length, "Invalid prize.length");
    }

    /**
     * Assert response from given url.
     * It always expect 50 records
     * @param {String} type - the contest type: "ACTIVE", "OPEN", "PAST", "UPCOMING"
     * @param {Function<err>} done the callback
     */
    function assertCollection(type, done) {
        request(API_ENDPOINT)
            .get('/v2/' +  'develop' + '/challenges?listType=' + type)
            .set('Accept', 'application/json')
            .expect('Content-Type', /json/)
            .expect(200)
            .end(function (err, res) {
                assert.ifError(err);
                var body = res.body;
                assert.equal(body.total, software_collection_length[type], 'total is not equal');
                assert.equal(body.pageIndex, 1);
                assert.equal(body.pageSize, 50);
                assert.ok(body.data);
                assert.equal(body.data.length, software_collection_length[type], 'data.length is not equal.');
                body.data.forEach(function (contest) {
                    assertContest(contest);
                });
                done();
            });
    }

    /**
     * Assert cmc value in response from given url.
     * @param {String} type - the contest type: "ACTIVE", "OPEN", "PAST", "UPCOMING"
     * @param {Number} size - the count of expected elements
     * @param {String} cmc - the cmc to assert
     * @param {Function<err>} done the callback
     */
    function assertCMC(type, size, cmc, done) {
        request(API_ENDPOINT)
            .get('/v2/' + 'develop' + '/challenges?listType=' + type + "&cmcTaskId=" + cmc)
            .set('Accept', 'application/json')
            .expect('Content-Type', /json/)
            .expect(200)
            .end(function (err, res) {
                assert.ifError(err);
                var body = res.body, i;
                assert.equal(body.total, size);
                assert.ok(body.data);
                assert.equal(body.data.length, size);

                for (i = 0; i < size; i = i + 1) {
                    assert.equal(body.data[i].cmcTaskId, cmc);
                }
                done();
            });
    }

    /**
     * Create request to search Studio contests API and assert 400 http code
     * @param {String} queryString - the query string
     * @param {Function} done - the callback function
     */
    function assert400(queryString, done) {
        request(API_ENDPOINT)
            .get('/v2/design/challenges?' + queryString)
            .set('Accept', 'application/json')
            .expect('Content-Type', /json/)
            .expect(400)
            .end(done);
    }

    /**
     * Helper method for validating Studio contest result for current test data
     * @param {String} queryString - the query string
     * @param {Array} contests - the array of expected contests. e.g [1, 2]
     * @param {String} type - the list type
     * @param {Number} total - the expected total count
     * @param {Number} pageIndex - the expected pageIndex
     * @param {Number} pageSize - the expected pageSize
     * @param {Function} done - the callback function
     */
    function validateResult(queryString, contests, type, total, pageIndex, pageSize, done) {
        request(API_ENDPOINT)
            .get('/v2/design/challenges?' + queryString)
            .set('Accept', 'application/json')
            .expect('Content-Type', /json/)
            .expect(200)
            .end(function (err, res) {
                if (err) {
                    done(err);
                    return;
                }
                var results = res.body.data, i, item;
                assert.lengthOf(results, contests.length, "invalid data.length");
                assert.equal(res.body.total, total, "invalid total");
                assert.equal(res.body.pageIndex, pageIndex, "invalid pageIndex");
                assert.equal(res.body.pageSize, pageSize, "invalid pageSize");
                for (i = 0; i < results.length; i = i + 1) {
                    item = results[i];
                    assert.isString(item.challengeType, "invalid type for result: " + i);
                    assert.isString(item.challengeName);
                    assert.equal(item.challengeName, "Studio Contest " + contests[i],
                        "invalid challengeName for result: " + i);
                    assert.ok(new Date(item.postingDate), "invalid postingDate for result: " + i);
                    assert.ok(new Date(item.registrationEndDate), "invalid registrationEndDate for result: " + i);
                    assert.ok(new Date(item.submissionEndDate), "invalid submissionEndDate for result: " + i);
                    assert.isNumber(item.prize[0], "invalid prize for result: " + i);
                }
                done();
            });
    }

    /**
     * Assert contests details are not found
     * @param {Number} contestId - the contest id
     * @param {Function<err>} done the callback
     */
    function assertContestDetailsNotFound(contestId, done) {
        request(API_ENDPOINT)
            .get('/v2/develop/challenges/' + contestId)
            .set('Accept', 'application/json')
            .expect('Content-Type', /json/)
            .expect(404)
            .end(done);
    }


    describe('', function () {

        /**
         * Clear database
         * @param {Function<err>} done the callback
         */
        function clearDb(done) {
            async.waterfall([
                function (cb) {
                    testHelper.runSqlFile(SQL_DIR + 'tcs_catalog__clean', TCS_CATALOG, cb);
                }, function (cb) {
                    testHelper.runSqlFile(SQL_DIR + 'tcs_dw__clean', TCS_DW, cb);
                }
            ], done);
        }

        /**
         * This function is run before all tests.
         * Generate tests data.
         * @param {Function<err>} done the callback
         */
        before(function (done) {
            async.waterfall([
                clearDb,
                function (cb) {
                    var files = testHelper.generatePartPaths(SQL_DIR + "tcs_catalog__insert_test_data", "", 2);
                    testHelper.runSqlFiles(files, TCS_CATALOG, cb);
                }, function (cb) {
                    testHelper.runSqlFile(SQL_DIR + 'tcs_dw__insert_test_data', TCS_DW, cb);
                }
            ], done);

        });

        /**
         * This function is run after all tests.
         * Clean up all data.
         * @param {Function<err>} done the callback
         */
        after(function (done) {
            clearDb(done);
        });

        /**
         * Tests for software contests
         */
        describe('-- Search Software Contests --', function () {

            /**
             * Test develop/challenges?listType=active
             */
            it('should return 5 ACTIVE contests', function (done) {
                assertCollection(ListType.ACTIVE, done);
            });

            /**
             * Test develop/challenges?listType=open
             */
            it('should return 4 OPEN contests', function (done) {
                assertCollection(ListType.OPEN,  done);
            });

            /**
             * Test develop/challenges?listType=past
             */
            it('should return 2 PAST contests', function (done) {
                assertCollection(ListType.PAST, done);
            });

            /**
             * Test develop/challenges?listType=upcoming
             */
            it('should return 2 UPCOMING contests', function (done) {
                assertCollection(ListType.UPCOMING, done);
            });


            /**
             * Test develop/challenges?listType=active&cmcTaskId=cmc
             */
            it('should return 5 ACTIVE contests with cmcTaskId=cmc', function (done) {
                assertCMC("ACTIVE", 3, "cmc", done);
            });

            /**
             * Test develop/challenges?listType=open&cmcTaskId=cmc
             */
            it('should return 3 OPEN contests with cmcTaskId=cmc', function (done) {
                assertCMC("OPEN", 3, "cmc", done);
            });

            /**
             * Test develop/challenges?listType=past&cmcTaskId=cmc
             */
            it('should return 2 PAST contests with cmcTaskId=cmc', function (done) {
                assertCMC("PAST", 2, "cmc", done);
            });

            /**
             * Test develop/challenges?listType=upcoming&cmcTaskId=cmc
             */
            it('should return 2 UPCOMING contests with cmcTaskId=cmc', function (done) {
                assertCMC("UPCOMING", 1, "cmc", done);
            });
        });

        describe("-- Search Design Contests --", function () {

            /**
             * /v2/design/challenges?listType=active
             */
            it("should return results for ?listType=active", function (done) {
                validateResult("listType=active", [1, 2, 4], "ACTIVE", 3, 1, 50, done);
            });

            /**
             * /v2/design/challenges?listType=aCtiVe
             */
            it("should return results for ?listType=aCtiVe", function (done) {
                validateResult("listType=aCtiVe", [1, 2, 4], "ACTIVE", 3, 1, 50, done);
            });

            /**
             * /v2/design/challenges?listType=active&sortColumn=challengeName
             */
            it("should return results for ?listType=active&sortColumn=challengeName", function (done) {
                validateResult("listType=active&sortColumn=challengeName", [1, 2, 4], "ACTIVE", 3, 1, 50, done);
            });

            /**
             * /v2/design/challenges?listType=active&sortColumn=challengeName&sortOrder=desc
             */
            it("should return results for ?listType=active&sortColumn=challengeName&sortOrder=desc", function (done) {
                validateResult("listType=active&sortColumn=challengeName&sortOrder=desc", [4, 2, 1], "ACTIVE", 3, 1, 50, done);
            });

            /**
             * /v2/design/challenges?listType=active&sortColumn=challengeName&sortOrder=dESc
             */
            it("should return results for ?listType=active&sortColumn=challengeName&sortOrder=dESc", function (done) {
                validateResult("listType=active&sortColumn=challengeName&sortOrder=dESc", [4, 2, 1], "ACTIVE", 3, 1, 50, done);
            });

            /**
             * /v2/design/challenges?listType=active&sortColumn=challengeType
             */
            it("should return results for ?listType=active&sortColumn=challengeType", function (done) {
                validateResult("listType=active&sortColumn=challengeType", [1, 4, 2], "ACTIVE", 3, 1, 50, done);
            });

            /**
             * /v2/design/challenges?listType=active&sortColumn=challengeType&sortOrder=desc
             */
            it("should return results for ?listType=active&sortColumn=challengeType&sortOrder=desc", function (done) {
                validateResult("listType=active&sortColumn=challengeType&sortOrder=desc", [2, 1, 4], "ACTIVE", 3, 1, 50, done);
            });

            /**
             * /v2/design/challenges?listType=active&sortColumn=registrationEndDate
             */
            it("should return results for ?listType=active&sortColumn=registrationEndDate", function (done) {
                validateResult("listType=active&sortColumn=registrationEndDate", [4, 1, 2], "ACTIVE", 3, 1, 50, done);
            });

            /**
             * /v2/design/challenges?listType=active&sortColumn=registrationEndDate&sortOrder=desc
             */
            it("should return results for ?listType=active&sortColumn=registrationEndDate&sortOrder=desc", function (done) {
                validateResult("listType=active&sortColumn=registrationEndDate&sortOrder=desc", [2, 1, 4], "ACTIVE", 3, 1, 50, done);
            });

            /**
             * /v2/design/challenges?listType=active&sortColumn=submissionEndDate
             */
            it("should return results for ?listType=active&sortColumn=submissionEndDate", function (done) {
                validateResult("listType=active&sortColumn=submissionEndDate", [1, 2, 4], "ACTIVE", 3, 1, 50, done);
            });

            /**
             * /v2/design/challenges?listType=active&sortColumn=submissionEndDate&sortOrder=desc
             */
            it("should return results for ?listType=active&sortColumn=submissionEndDate&sortOrder=desc", function (done) {
                validateResult("listType=active&sortColumn=submissionEndDate&sortOrder=desc", [4, 2, 1], "ACTIVE", 3, 1, 50, done);
            });

            /**
             * /v2/design/challenges?listType=active&sortColumn=finalFixEndDate
             */
            it("should return results for ?listType=active&sortColumn=finalFixEndDate", function (done) {
                validateResult("listType=active&sortColumn=finalFixEndDate", [1, 2, 4], "ACTIVE", 3, 1, 50, done);
            });

            /**
             * /v2/design/challenges?listType=active&sortColumn=finalFixEndDate&sortOrder=desc
             */
            it("should return results for ?listType=active&sortColumn=finalFixEndDate&sortOrder=desc", function (done) {
                validateResult("listType=active&sortColumn=finalFixEndDate&sortOrder=desc", [1, 2, 4], "ACTIVE", 3, 1, 50, done);
            });

            /**
             * /v2/design/challenges?listType=active&sortColumn=challengeId
             */
            it("should return results for ?listType=active&sortColumn=challengeId", function (done) {
                validateResult("listType=active&sortColumn=challengeId", [1, 2, 4], "ACTIVE", 3, 1, 50, done);
            });

            /**
             * /v2/design/challenges?listType=active&sortColumn=challengeId&sortOrder=desc
             */
            it("should return results for ?listType=active&sortColumn=challengeId&sortOrder=desc", function (done) {
                validateResult("listType=active&sortColumn=challengeId&sortOrder=desc", [4, 2, 1], "ACTIVE", 3, 1, 50, done);
            });

            /**
             * /v2/design/challenges?listType=active&sortColumn=prize1
             */
            it("should return results for ?listType=active&sortColumn=prize1", function (done) {
                validateResult("listType=active&sortColumn=prize1", [2, 1, 4], "ACTIVE", 3, 1, 50, done);
            });

            /**
             * /v2/design/challenges?listType=active&sortColumn=prize1&sortOrder=desc
             */
            it("should return results for ?listType=active&sortColumn=prize1&sortOrder=desc", function (done) {
                validateResult("listType=active&sortColumn=prize1&sortOrder=desc", [1, 4, 2], "ACTIVE", 3, 1, 50, done);
            });

            /**
             * /v2/design/challenges?listType=active&sortColumn=digitalRunPoints
             */
            it("should return results for ?listType=active&sortColumn=digitalRunPoints", function (done) {
                validateResult("listType=active&sortColumn=digitalRunPoints", [2, 1, 4], "ACTIVE", 3, 1, 50, done);
            });

            /**
             * /v2/design/challenges?listType=active&sortColumn=digitalRunPoints&sortOrder=desc
             */
            it("should return results for ?listType=active&sortColumn=digitalRunPoints&sortOrder=desc", function (done) {
                validateResult("listType=active&sortColumn=digitalRunPoints&sortOrder=desc", [1, 4, 2], "ACTIVE", 3, 1, 50, done);
            });

            /**
             * /v2/design/challenges?listType=active&sortColumn=cmcTaskId
             */
            it("should return results for ?listType=active&sortColumn=cmcTaskId", function (done) {
                validateResult("listType=active&sortColumn=cmcTaskId", [4, 2, 1], "ACTIVE", 3, 1, 50, done);
            });

            /**
             * /v2/design/challenges?listType=active&sortColumn=cmcTaskId&sortOrder=desc
             */
            it("should return results for ?listType=active&sortColumn=cmcTaskId&sortOrder=desc", function (done) {
                validateResult("listType=active&sortColumn=cmcTaskId&sortOrder=desc", [1, 2, 4], "ACTIVE", 3, 1, 50, done);
            });

            /**
             * /v2/design/challenges?listType=active&sortColumn=currentStatus
             */
            it("should return results for ?listType=active&sortColumn=currentStatus", function (done) {
                validateResult("listType=active&sortColumn=currentStatus", [1, 2, 4], "ACTIVE", 3, 1, 50, done);
            });

            /**
             * /v2/design/challenges?listType=active&sortColumn=currentStatus&sortOrder=desc
             */
            it("should return results for ?listType=active&sortColumn=currentStatus&sortOrder=desc", function (done) {
                validateResult("listType=active&sortColumn=currentStatus&sortOrder=desc", [1, 2, 4], "ACTIVE", 3, 1, 50, done);
            });

            /**
             * /v2/design/challenges?pageIndex=1&pageSize=1
             */
            it("should return results for ?pageIndex=1&pageSize=1", function (done) {
                validateResult("pageIndex=1&pageSize=1", [1], "ACTIVE", 2, 1, 1, done);
            });

            /**
             * /v2/design/challenges?pageIndex=2&pageSize=1
             */
            it("should return results for ?pageIndex=2&pageSize=1", function (done) {
                validateResult("pageIndex=2&pageSize=1", [2], "ACTIVE", 2, 2, 1, done);
            });

            /**
             * /v2/design/challenges?pageIndex=-1
             */
            it("should return results for ?pageIndex=-1", function (done) {
                validateResult("pageIndex=-1", [1, 2], "ACTIVE", 2, 1, 2147483647, done);
            });

            /**
             * /v2/design/challenges?listType=OPEN
             */
            it("should return results for ?listType=OPEN", function (done) {
                validateResult("listType=OPEN", [1, 2], "OPEN", 2, 1, 50, done);
            });

            /**
             * /v2/design/challenges?listType=PAST
             */
            it("should return results for ?listType=PAST", function (done) {
                validateResult("listType=PAST", [5], "PAST", 1, 1, 50, done);
            });

            /**
             * /v2/design/challenges?listType=UPCOMING
             */
            it("should return results for ?listType=UPCOMING", function (done) {
                validateResult("listType=UPCOMING", [3], "UPCOMING", 1, 1, 50, done);
            });


            /**
             * /v2/design/challenges?listType=active&challengeType=Banners/icons
             */
            it("should return results for ?listType=active&challengeType=Banners/icons", function (done) {
                validateResult("listType=active&challengeType=Banners/icons", [1, 4], "ACTIVE", 2, 1, 50, done);
            });


            /**
             * /v2/design/challenges?listType=active&challengeName=contest 1
             */
            it("should return results for ?listType=active&challengeName=contest 1", function (done) {
                validateResult("listType=active&challengeName=contest 1", [1], "ACTIVE", 1, 1, 50, done);
            });


            /**
             * /v2/design/challenges?listType=active&prizeLowerBound=1000
             */
            it("should return results for ?listType=active&prizeLowerBound=1000", function (done) {
                validateResult("listType=active&prizeLowerBound=1000", [1, 4], "ACTIVE", 2, 1, 50, done);
            });

            /**
             * /v2/design/challenges?listType=active&prizeUpperBound=1200
             */
            it("should return results for ?listType=active&prizeUpperBound=1200", function (done) {
                validateResult("listType=active&prizeUpperBound=1200", [1, 2, 4], "ACTIVE", 3, 1, 50, done);
            });

            /**
             * /v2/design/challenges?listType=active&cmcTaskId=cmc
             */
            it("should return results for ?listType=active&cmcTaskId=cmc", function (done) {
                validateResult("listType=active&cmcTaskId=cmc", [1], "ACTIVE", 1, 1, 50, done);
            });

            /**
             * /v2/design/challenges?listType=open&cmcTaskId=cmc
             */
            it("should return results for ?listType=open&cmcTaskId=cmc", function (done) {
                validateResult("listType=open&cmcTaskId=cmc", [1], "OPEN", 1, 1, 50, done);
            });


            /**
             * /v2/design/challenges?listType=open&prizeLowerBound=800
             */
            it("should return results for ?listType=open&prizeLowerBound=800", function (done) {
                validateResult("listType=open&prizeLowerBound=800", [1, 2], "OPEN", 2, 1, 50, done);
            });


            /**
             * /v2/design/challenges?listType=xyz
             */
            it("should return error 400 when listType is not valid value", function (done) {
                assert400("listType=xyz", done);
            });

            /**
             * /v2/design/challenges?pageSize=xyz
             */
            it("should return error 400 when pageSize is not number", function (done) {
                assert400("pageSize=xyz", done);
            });

            /**
             * /v2/design/challenges?pageSize=0
             */
            it("should return error 400 when pageSize is 0", function (done) {
                assert400("pageSize=0", done);
            });

            /**
             * /v2/design/challenges?pageSize=-1
             */
            it("should return error 400 when pageSize is -1", function (done) {
                assert400("pageSize=-1", done);
            });

            /**
             * /v2/design/challenges?pageSize=100000000000000000000
             */
            it("should return error 400 when pageSize is too big number", function (done) {
                assert400("pageSize=100000000000000000000", done);
            });

            /**
             * /v2/design/challenges?pageSize=1.123
             */
            it("should return error 400 when pageSize is float number", function (done) {
                assert400("pageSize=1.123", done);
            });

            /**
             * /v2/design/challenges?pageIndex=xyz
             */
            it("should return error 400 when pageIndex is not number", function (done) {
                assert400("pageIndex=xyz", done);
            });

            /**
             * /v2/design/challenges?pageIndex=0
             */
            it("should return error 400 when pageIndex is 0", function (done) {
                assert400("pageIndex=0", done);
            });

            /**
             * /v2/design/challenges?pageIndex=-2
             */
            it("should return error 400 when pageIndex is -2", function (done) {
                assert400("pageIndex=-2", done);
            });

            /**
             * /v2/design/challenges?pageIndex=100000000000000000000
             */
            it("should return error 400 when pageIndex is too big number", function (done) {
                assert400("pageIndex=100000000000000000000", done);
            });

            /**
             * /v2/design/challenges?pageIndex=1.123
             */
            it("should return error 400 when pageIndex is float number", function (done) {
                assert400("pageIndex=1.123", done);
            });

            /**
             * /v2/design/challenges?sortColumn=xyz
             */
            it("should return error 400 when sortColumn is invalid", function (done) {
                assert400("sortColumn=xyz", done);
            });

            /**
             * /v2/design/challenges?sortOrder=xyz
             */
            it("should return error 400 when sortOrder is invalid", function (done) {
                assert400("sortOrder=xyz", done);
            });

            /**
             * /v2/design/challenges?prizeLowerBound=xyz
             */
            it("should return error 400 when prizeLowerBound is not valid value", function (done) {
                assert400("prizeLowerBound=xyz", done);
            });

            /**
             * /v2/design/challenges?prizeUpperBound=xyz
             */
            it("should return error 400 when prizeUpperBound is not valid value", function (done) {
                assert400("prizeUpperBound=xyz", done);
            });

            /**
             * /v2/design/challenges?prizeLowerBound=-1
             */
            it("should return error 400 when prizeLowerBound is -1", function (done) {
                assert400("prizeLowerBound=-1", done);
            });

            /**
             * /v2/design/challenges?prizeUpperBound=-1
             */
            it("should return error 400 when prizeUpperBound is -1", function (done) {
                assert400("prizeUpperBound=-1", done);
            });

            /**
             * /v2/design/challenges?pageIndex=100&pageSize=100
             */
            it("should return empty result when no results returned", function (done) {
                request(API_ENDPOINT)
                    .get('/v2/design/challenges?pageIndex=100&pageSize=100')
                    .set('Accept', 'application/json')
                    .expect('Content-Type', /json/)
                    .expect(200)
                    .end(done);
            });

        });

        describe('-- Search Both Contests --', function () {
            it('should return 8 Active contests', function (done) {
                request(API_ENDPOINT)
                    .get('/v2/challenges?listType=active')
                    .set('Accept', 'application/json')
                    .expect('Content-Type', /json/)
                    .expect(200)
                    .end(function (err, res) {
                        var body = res.body;
                        assert.equal(body.total, 8, 'Invalid total number');
                        assert.equal(body.pageIndex, 1, 'Invalid pageIndex');
                        assert.equal(body.pageSize, 50, 'Invalid pageSize');
                        assert.equal(body.data.length, 8, 'Invalid data length');
                        done();
                    });
            });
            it('should return 6 Open contests', function (done) {
                request(API_ENDPOINT)
                    .get('/v2/challenges?listType=open')
                    .set('Accept', 'application/json')
                    .expect('Content-Type', /json/)
                    .expect(200)
                    .end(function (err, res) {
                        var body = res.body;
                        assert.equal(body.total, 6, 'Invalid total number');
                        assert.equal(body.pageIndex, 1, 'Invalid pageIndex');
                        assert.equal(body.pageSize, 50, 'Invalid pageSize');
                        assert.equal(body.data.length, 6, 'Invalid data length');
                        done();
                    });
            });
            it('should return 3 Upcoming contests', function (done) {
                request(API_ENDPOINT)
                    .get('/v2/challenges?listType=upcoming')
                    .set('Accept', 'application/json')
                    .expect('Content-Type', /json/)
                    .expect(200)
                    .end(function (err, res) {
                        var body = res.body;
                        assert.equal(body.total, 3, 'Invalid total number');
                        assert.equal(body.pageIndex, 1, 'Invalid pageIndex');
                        assert.equal(body.pageSize, 50, 'Invalid pageSize');
                        assert.equal(body.data.length, 3, 'Invalid data length');
                        done();
                    });
            });

            it('should return 3 Past contests', function (done) {
                request(API_ENDPOINT)
                    .get('/v2/challenges?listType=past')
                    .set('Accept', 'application/json')
                    .expect('Content-Type', /json/)
                    .expect(200)
                    .end(function (err, res) {
                        var body = res.body;
                        assert.equal(body.total, 3, 'Invalid total number');
                        assert.equal(body.pageIndex, 1, 'Invalid pageIndex');
                        assert.equal(body.pageSize, 50, 'Invalid pageSize');
                        assert.equal(body.data.length, 3, 'Invalid data length');
                        done();
                    });
            });
        });
    });

    describe('', function () {
        /**
         * Tests for Software contest detail
         */
        describe('-- Software Contest Detail API --', function () {
            var SQL_DIR = __dirname + '/sqls/softwareContestDetail/';

            function clearDb(done) {
                testHelper.runSqlFile(SQL_DIR + "tcs_catalog__delete.sql", TCS_CATALOG, done);
            }

            before(function (done) {
                async.waterfall([
                    clearDb,
                    function (cb) {
                        testHelper.runSqlFile(SQL_DIR + "tcs_catalog__insert.sql", TCS_CATALOG, cb);
                    }
                ], done);
            });

            after(function (done) {
                clearDb(done);
            });

            /**
             * develop/challenges/30400000
             */
            it('should return PAST software details', function (done) {
                request(API_ENDPOINT)
                    .get('/v2/develop/challenges/' + '30400000')
                    .set('Accept', 'application/json')
                    .expect('Content-Type', /json/)
                    .expect(200)
                    .end(function (err, res) {
                        if (err) {
                            done(err);
                        }
                        var expected = require('./test_files/expected_software_contest_detail.json');
                        delete res.body.serverInformation;
                        delete res.body.requestorInformation;
                        // The time in test data is not constant.
                        delete res.body.postingDate;
                        delete res.body.registrationEndDate;
                        delete res.body.checkpointSubmissionEndDate;
                        delete res.body.appealsEndDate;
                        delete res.body.finalFixEndDate;
                        delete res.body.submissionEndDate;
                        delete res.body.currentPhaseEndDate;
                        delete res.body.currentPhaseRemainingTime;
                        delete res.body.registrants[0].registrationDate;
                        delete res.body.submissions[0].submissionDate;
                        assert.deepEqual(res.body, expected, 'Invalid response');
                        done();
                    });
            });


            /**
             * develop/challenges/31210000
             * develop/challenges/31200000
             * develop/challenges/31220000
             * develop/challenges/31300000
             * develop/challenges/31310000
             * develop/challenges/31320002
             */

            it('should return 404 while access PRIVATE contest 31200000', function (done) {
                assertContestDetailsNotFound(31200000, done);
            });

            it('should return 404 while access PRIVATE contest 31220000', function (done) {
                assertContestDetailsNotFound(31220000, done);
            });

            it('should return 404 while access PRIVATE contest 31300000', function (done) {
                assertContestDetailsNotFound(31300000, done);
            });

            it('should return 404 while access PRIVATE contest 31310000', function (done) {
                assertContestDetailsNotFound(31310000, done);
            });

            it('should return 404 while access PRIVATE contest 31320002', function (done) {
                assertContestDetailsNotFound(31320002, done);
            });
        });

        describe("-- Studio Contests Detail API --", function () {

            var SQL_DIR = __dirname + "/sqls/contestsStudio/";

            /**
             * Clear database
             * @param {Function<err>} done the callback
             */
            function clearDb(done) {
                async.waterfall([
                    function (cb) {
                        testHelper.runSqlFile(SQL_DIR + "tcs_catalog__clean", TCS_CATALOG, cb);
                    },
                    function (cb) {
                        testHelper.runSqlFile(SQL_DIR + "tcs_dw__clean", TCS_DW, cb);
                    }
                ], done);
            }

            before(function (done) {
                async.waterfall([
                    clearDb,
                    function (cb) {
                        testHelper.runSqlFile(SQL_DIR + "tcs_catalog__insert_test_data", TCS_CATALOG, cb);
                    },
                    function (cb) {
                        testHelper.runSqlFile(SQL_DIR + "tcs_dw__insert_test_data", TCS_DW, cb);
                    }
                ], done);
            });

            after(function (done) {
                clearDb(done);
            });

            /**
             * Create request to search contests API and assert 400 http code
             * @param {String} contestId - the contest id
             * @param {Function} done - the callback function
             */
            function assert400(contestId, done) {
                request(API_ENDPOINT)
                    .get('/v2/design/challenges/' + contestId)
                    .set('Accept', 'application/json')
                    .expect('Content-Type', /json/)
                    .expect(400)
                    .end(done);
            }

            /**
             * /v2/design/challenges/10041
             */
            it("should return contest details", function (done) {
                request(API_ENDPOINT)
                    .get('/v2/design/challenges/10041')
                    .set('Accept', 'application/json')
                    .expect('Content-Type', /json/)
                    .expect(200)
                    .end(function (err, res) {
                        var body = res.body;
                        assert.lengthOf(body.submissions, 1, "invalid submissions count");
                        assert.lengthOf(body.checkpoints, 1, "invalid checkpoints count");
                        assert.lengthOf(body.winners, 1, "invalid winners count");
                        //submissionTime is not constant value
                        assert.ok(body.submissions[0].submissionTime);
                        assert.ok(body.checkpoints[0].submissionTime);
                        assert.ok(body.winners[0].submissionTime);
                        delete body.submissions[0].submissionTime;
                        delete body.checkpoints[0].submissionTime;
                        delete body.winners[0].submissionTime;
                        delete body.currentPhaseEndDate;
                        testHelper.assertResponse(err,
                            res,
                            "test_files/exptected_studio_contest_details.json",
                            done);
                    });
            });


            /**
             * /v2/design/challenges/xyz
             */
            it("should return 400 error if contestId is not number", function (done) {
                assert400("xyz", done);
            });

            /**
             * /v2/design/challenges/0
             */
            it("should return 400 error if contestId is 0", function (done) {
                assert400("0", done);
            });

            /**
             * /v2/design/challenges/-1
             */
            it("should return 400 error if contestId is -1", function (done) {
                assert400("-1", done);
            });

            /**
             * /v2/design/challenges/1.23
             */
            it("should return 400 error if contestId is 1.23", function (done) {
                assert400("1.23", done);
            });

            /**
             * /v2/design/challenges/10000000000000000
             */
            it("should return 400 error if contestId is too big number", function (done) {
                assert400("10000000000000000", done);
            });
        });
    });

});
